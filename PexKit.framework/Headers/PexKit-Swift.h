// Generated by Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import AVFoundation;
@import Foundation.NSURLSession;
@import Foundation;
@import CoreGraphics;
#endif

#import <PexKit/PexKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, AudioOutputDevice) {
  AudioOutputDeviceSpeaker = 0,
  AudioOutputDeviceDefault = 1,
};

@class JoinableConference;


/// Look in your calendar to find events related to video conferences comming up shortly
SWIFT_CLASS("_TtC6PexKit8Calendar")
@interface Calendar : NSObject

/// Return any conference comming up in 15 minutes. For exact time, one will have to check code as this might get tweaked back and forth
+ (void)upcomingConferences:(void (^ __nonnull)(NSArray<JoinableConference *> * __nonnull))block;

/// Return any gatway based conference comming up. If we find anything like https://meet.gotham.com/batman/Y68ZVPW9 it will be returned in JoinableConference as batman@gotham.com;gruu;opaque=app;conf:focus:id:Y68ZVPW9
+ (void)upcomingGateway:(void (^ __nonnull)(NSArray<JoinableConference *> * __nonnull))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RTCPeerConnection;
@class RTCMediaStream;
@class RTCDataChannel;
@class RTCICECandidate;
@class RTCSessionDescription;
@class NSError;

SWIFT_CLASS("_TtC6PexKit4Call")
@interface Call : NSObject <RTCSessionDescriptionDelegate, RTCPeerConnectionDelegate>
@property (nonatomic, copy) NSArray<NSString *> * __nonnull iceServers;
@property (nonatomic) AVCaptureDevicePosition videoPosition;
- (void)updateStream:(AVCaptureDevicePosition)cameraPostion;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection signalingStateChanged:(RTCSignalingState)stateChanged;
- (void)peerConnectionOnRenegotiationNeeded:(RTCPeerConnection * __null_unspecified)peerConnection;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection iceGatheringChanged:(RTCICEGatheringState)newState;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection iceConnectionChanged:(RTCICEConnectionState)newState;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection addedStream:(RTCMediaStream * __null_unspecified)stream;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection removedStream:(RTCMediaStream * __null_unspecified)stream;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection didOpenDataChannel:(RTCDataChannel * __null_unspecified)dataChannel;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection gotICECandidate:(RTCICECandidate * __null_unspecified)candidate;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection didCreateSessionDescription:(RTCSessionDescription * __null_unspecified)sdp error:(NSError * __null_unspecified)error;
- (void)peerConnection:(RTCPeerConnection * __null_unspecified)peerConnection didSetSessionDescriptionWithError:(NSError * __null_unspecified)error;
@end



/// Implement if you want your app to be allow text chatting with participants
SWIFT_PROTOCOL("_TtP6PexKit12ChatDelegate_")
@protocol ChatDelegate
@optional
- (void)messageReceived:(NSDictionary<NSString *, NSString *> * __nonnull)msg;
@end

@class NSOperationQueue;
enum ServiceType : NSUInteger;
enum ParticipantRole : NSUInteger;
@class PexVideoView;
enum ServiceError : NSInteger;
@class NSData;
@class NSDictionary;
@class Participant;
@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@protocol ConferenceDelegate;
@protocol ParticipantDelegate;
@protocol PresentationDelegate;
@protocol MediaDelegate;


/// Use conference to connect to a Pexip MCU and get lists of participants and video feed. To use it is recommended to create a conference object like this:
///
/// <code>let conference = Conference()
/// 
/// </code>
/// To connect to a conference we need to specify the URI of the conference
///
/// <code>let uri = ConferenceURI(uri: "conference@domain")
/// 
/// </code>
/// <code>ConferenceURI
/// </code> will verify that the URI string is valid. Nil will be returned
/// if it is not a valid URI. Finally use <code>connect
/// </code> with the URI to connect to conference.
///
/// <code>conference.connect("Uncle Sam", URI: uri, pin: "")  { status in
/// }
/// 
/// </code>
/// The properties <code>videoView
/// </code> and <code>videoSelfView
/// </code> must be set to an external <code>UIView
/// </code> or
/// <code>NSOpenGLView
/// </code> depending on whether you are targeting iOS or OS X.
SWIFT_CLASS("_TtC6PexKit10Conference")
@interface Conference : NSObject <NSURLSessionDelegate>

/// Delegate for handling events, such as participants added or presentation frame received This will receive ALL events. If you want just a subset, use the more specialiezed delegates.
@property (nonatomic, weak) id <ConferenceDelegate> __nullable delegate;

/// Be informed of participants joining, leaving, entering stage etc.
@property (nonatomic, weak) id <ParticipantDelegate> __nullable participantDelegate;

/// Callbacks for when presentation starts, a presentation frame is received etc.
@property (nonatomic, weak) id <PresentationDelegate> __nullable presentationDelegate;

/// Use for enabling text chatting
@property (nonatomic, weak) id <ChatDelegate> __nullable chatDelegate;

/// Video and Audio related delegate
@property (nonatomic, weak) id <MediaDelegate> __nullable mediaDelegate;
@property (nonatomic, strong) NSOperationQueue * __nonnull delegateQueue;

/// User name used for authentication to proxies. This will usually not be needed.
@property (nonatomic, copy) NSString * __nullable username;

/// Password used for proxy authentication
@property (nonatomic, copy) NSString * __nullable password;
@property (nonatomic, copy) NSString * __nullable versionId;
@property (nonatomic, copy) NSString * __nullable pseudoVersion;

/// Extension to use in a Virtual Reception
@property (nonatomic, copy) NSString * __nullable conferenceExtension;

/// String containing host and port. If a SRV lookup was done then the host string will be different from the one provided to URI during connect.
@property (nonatomic, readonly, copy) NSString * __nonnull host;

/// This is in fact the whole URI string and not just the conference.
@property (nonatomic, readonly, copy) NSString * __nonnull conference;
@property (nonatomic, copy) NSString * __nonnull token;
@property (nonatomic) enum ServiceType serviceType;
@property (nonatomic) enum ServiceType currentServiceType;
@property (nonatomic) enum ParticipantRole role;
@property (nonatomic, readonly) BOOL weArePresenting;

/// DEPRECATED
@property (nonatomic, readonly, copy) NSString * __nullable callUuid;

/// DEPRECATED
@property (nonatomic, readonly, copy) NSString * __nullable presentationUuid;

/// Use encrypted or unencrypted communication with the REST API
@property (nonatomic) BOOL https;

/// If you want to display received video in a view assign the view to this property
@property (nonatomic, strong) PexVideoView * __nullable videoView;

/// Assign a view to this property to view a video from your own camera.
@property (nonatomic, strong) PexVideoView * __nullable videoSelfView;
@property (nonatomic, readonly) BOOL isLoggedIn;
@property (nonatomic, readonly) BOOL isAudioOnly;
@property (nonatomic) BOOL locked;
@property (nonatomic) BOOL guestsMuted;
@property (nonatomic, copy) NSString * __nonnull displayName;
@property (nonatomic, readonly) BOOL expiryTimerValid;
@property (nonatomic, readonly) BOOL callExists;
@property (nonatomic) BOOL audioMute;
@property (nonatomic) BOOL videoMute;
@property (nonatomic) NSTimeInterval httpTimeout;
@property (nonatomic) NSTimeInterval callsHttpTimeout;

/// Normal recommended way of constructing a Conference object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Only use this if you don't want to use connect method later. E.g. if you don't want to do a SRV lookup of host.
- (nullable instancetype)initWithDisplayName:(NSString * __nonnull)displayName host:(NSString * __nonnull)host pin:(NSString * __nonnull)pin OBJC_DESIGNATED_INITIALIZER;

/// Only use this from Objective-C as you can use the connect method taking a ConferenceURI object when using Swift. This should be the first method to call for Objective-C users after Conference object has been created.
- (void)connect:(NSString * __nonnull)displayName uri:(NSString * __nonnull)uri pin:(NSString * __nonnull)pin completion:(void (^ __nonnull)(BOOL))completion;

/// Once you are connected to conference, you should obtain a token since this is needed for authentication for further REST calls.
- (void)requestToken:(void (^ __nonnull)(enum ServiceError))completion;

/// Start listening for events. This will cause previously registered callbacks to be called.
///
/// See <code>stopListeningForEvents
/// </code>
///
/// \param failonerror if true token will be released and connection reset upon failure
- (void)listenForEventsWithFailonerror:(BOOL)failonerror;

/// Stop receiving events caused by calling listenForEvents
- (void)stopListeningForEvents;

/// Call this when hanging up. Otherwise user will linger on in conference after you have left.
- (void)releaseToken:(void (^ __nonnull)(enum ServiceError))completion;

/// Get presentation. Presentations are one frame at a time in either JPEG or PNG format, stored in a NSData object.
- (void)fetchPresentation:(BOOL)png completion:(void (^ __nonnull)(enum ServiceError, NSData * __nullable))completion;

/// You can use this to allow your app to send a presentation to everybody else. Typically the data should be JPEG formatted data. E.g. you can let user pick an image which you can broadcast to other conference participants with this method.
- (void)postPresentation:(NSData * __nonnull)data completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Part of chat API. Use to broadcase text messages to other participants in the conference.
- (void)sendMessage:(NSString * __nonnull)msg completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Mute all participants. When muted, no "guest" participants can speak unless they are explicitly unmuted. When unmuted, all guests on a conference can speak. These settings are only available to conference hosts.
- (void)muteAll:(void (^ __nonnull)(enum ServiceError))completion;

/// Unmute all participants. When muted, no "guest" participants can speak unless they are explicitly unmuted. When unmuted, all guests on a conference can speak. These settings are only available to conference hosts.
- (void)unmuteAll:(void (^ __nonnull)(enum ServiceError))completion;

/// When locked people joining have to be accepted by a host already joined.
- (void)lockConference:(void (^ __nonnull)(enum ServiceError))completion;

/// Allow anyone to enter conference without being accepted first
- (void)unlockConference:(void (^ __nonnull)(enum ServiceError))completion;
- (void)buzz:(void (^ __nonnull)(enum ServiceError))completion;
- (void)clearAllBuzz:(void (^ __nonnull)(enum ServiceError))completion;
- (void)fetchBuzzList:(void (^ __nonnull)(enum ServiceError, NSDictionary * __nullable))completion;

/// Use from Objetive-C only. Use it to dial a participant, so he/she can be added to the conference when he/she responds. The response is an array of UUIDs of new participants, if dial-out was successfully initiated. In most cases the dial-out will only generate a single call and thus a single UUID in this array, however if Pexip forks the call there may end up being multiple UUIDs. Only one of these will be answered, however, and the rest will be disconnected.
///
/// The call UUIDs will appear as new participants immediately, with a "service_type" of "connecting".
/// If the call is answered, the participant will be updated with a new "service_type", typically being
/// "conference". The participant may also be deleted if the receiver rejects the call, or the call
/// attempt times out in 30 seconds if not answered.
- (void)dialOut:(NSString * __nonnull)uriString role:(enum ParticipantRole)role completion:(void (^ __nonnull)(enum ServiceError, NSArray<NSString *> * __nonnull))completion;

/// Use from Objective-C only. Explicitly get participants rather than using the registered events which would be the normal approach. Participants are stored on UUID so it is easy to check if there are new participants being added.
- (void)fetchParticipants:(void (^ __nonnull)(enum ServiceError, NSDictionary<NSString *, Participant *> * __nullable))completion;

/// Mute the audio of a particular participant
- (void)muteParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Unmute a particular participant.
- (void)unmuteParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Disconnect participant.
- (void)disconnectParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;
- (void)disconnectAllParticipants:(void (^ __nonnull)(enum ServiceError))completion;

/// Unlock participant.
- (void)unlockParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Lock participant.
- (void)lockParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;
- (void)fetchParticipantAvatar:(Participant * __nonnull)participant size:(CGSize)size completion:(void (^ __nonnull)(enum ServiceError, NSData * __nullable))completion;
- (void)denyRxPresentationParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;
- (void)allowRxPresentationParticipant:(Participant * __nonnull)participant completion:(void (^ __nonnull)(enum ServiceError))completion;

/// Set the videoView property before calling this. When it has finnished, unless you have disabled video the provided video view will start getting updated with video frames.
- (void)escalateMedia:(void (^ __nonnull)(enum ServiceError))completion;
- (void)stopPresentation:(void (^ __nonnull)(enum ServiceError))completion;

/// Stop updating view attached to videoView property and stop receiving video data.
- (void)disconnectMedia:(void (^ __nonnull)(enum ServiceError))completion;

/// Where audio should go, e.g. speaker
@property (nonatomic) enum AudioOutputDevice audioOutput;
- (void)toggleAudioOutput;
- (void)URLSession:(NSURLSession * __nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * __nonnull)challenge completionHandler:(void (^ __nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * __nullable))completionHandler;
- (void)stop;
- (BOOL)isPngPresentationSupported;
- (void)flipCamera;
- (void)receivedMessage:(NSDictionary<NSString *, NSString *> * __nonnull)message;
@end



/// To be informed of changes to media. By that we mean audio and video
SWIFT_PROTOCOL("_TtP6PexKit13MediaDelegate_")
@protocol MediaDelegate
@optional
- (void)mediaReady;
- (void)mediaEnded:(BOOL)audioOnly duration:(NSInteger)duration;
@end



/// Implement this to be informed of anything happening to a presentation
SWIFT_PROTOCOL("_TtP6PexKit20PresentationDelegate_")
@protocol PresentationDelegate
@optional
- (void)presentationFrame:(NSString * __nullable)id;
- (void)presentationStart:(NSString * __nonnull)name;
- (void)presentationStop;
- (void)presentationStolen;
@end



/// Implement this delegate to receive updates about participants joining or leaving a conference.
SWIFT_PROTOCOL("_TtP6PexKit19ParticipantDelegate_")
@protocol ParticipantDelegate
@optional
- (void)participantAdded:(Participant * __nonnull)participant;
- (void)participantChanged:(Participant * __nonnull)participant;
- (void)participantRemoved:(NSString * __nonnull)uuid;
- (void)rosterUpdate:(NSArray<Participant *> * __nonnull)rosterList;
- (void)participantSyncEnd:(NSArray<Participant *> * __nonnull)participants;
- (void)stageUpdate:(NSArray<Participant *> * __nonnull)stage;
@end



/// Delegates for Conference should implement this protocol to be informed of events such as participant was added to conference or we just got another frame for a presentation.
///
/// Most of these methods are not required to be implemented.
SWIFT_PROTOCOL("_TtP6PexKit18ConferenceDelegate_")
@protocol ConferenceDelegate <ParticipantDelegate, PresentationDelegate, ChatDelegate, MediaDelegate>
@optional
- (void)callDisconnected;
- (void)connectionReset;
- (void)conferenceUpdated:(BOOL)locked guestsMuted:(BOOL)guestsMuted;
@end

@class NSDate;

SWIFT_CLASS("_TtC6PexKit18JoinableConference")
@interface JoinableConference : NSObject
@property (nonatomic, copy) NSString * __nonnull title;
@property (nonatomic, copy) NSString * __nullable pin;
@property (nonatomic, copy) NSString * __nonnull uri;
@property (nonatomic, strong) NSDate * __nullable startDate;
@property (nonatomic, copy) NSString * __nonnull body;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A participant in a video conference. User indentifies participant by URI and system distingush them by UUIDs which are randomly created by the server. Don't assume the UUIDs are persistent.
SWIFT_CLASS("_TtC6PexKit11Participant")
@interface Participant : NSObject

/// For use from Objective-C as UUIDType is not available. For Swift use UUID property.
@property (nonatomic, copy) NSString * __nonnull uuid;

/// For use from Objective-C as ParticipantURI is not available. For Swift use URI property.
@property (nonatomic, copy) NSString * __nonnull uri;

/// What will be seen in the roster list by other participants
@property (nonatomic, copy) NSString * __nonnull displayName;
@property (nonatomic) BOOL hasMedia;
@property (nonatomic, strong) NSDate * __nonnull startTime;
@property (nonatomic) BOOL speaking;

/// Is participant audio muted?
@property (nonatomic) BOOL muted;

/// Is participant presenting slides
@property (nonatomic) BOOL isPresenting;
@property (nonatomic) BOOL denyReceivingPresentation;

/// Decides what is allowed to do in conference
@property (nonatomic) enum ParticipantRole role;

/// Says something about state of user, e.g. if he/she is currently getting connected, is in a regular conference or a lecture.
@property (nonatomic) enum ServiceType serviceType;
@property (nonatomic) BOOL presentationSupported;
@property (nonatomic, copy) NSString * __nonnull overlayText;
@property (nonatomic) float spotlight;
@property (nonatomic) BOOL isExternal;
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// We store raw data for avatar pictures so that this class can be used from both iOS and OSX, since NSImage and UIImage are not the same, but can both be initialized with NSData.
@property (nonatomic, strong) NSData * __nullable avatarPictureData;

/// Use this with Objective-C which doesn't support the UUID and ParticipantURI types like Swift.
- (nonnull instancetype)initWithUuid:(NSString * __nonnull)uuid uri:(NSString * __nonnull)uri displayName:(NSString * __nonnull)displayName hasMedia:(BOOL)hasMedia startTime:(NSDate * __nonnull)startTime speaking:(BOOL)speaking muted:(BOOL)muted isPresenting:(BOOL)isPresenting denyReceivingPresentation:(BOOL)denyReceivingPresentation role:(enum ParticipantRole)role serviceType:(enum ServiceType)serviceType presentationSupported:(BOOL)presentationSupported overlayText:(NSString * __nonnull)overlayText spotlight:(float)spotlight isExternal:(BOOL)isExternal OBJC_DESIGNATED_INITIALIZER;

/// Duplicate participant
- (nonnull instancetype)initWithParticipant:(Participant * __nonnull)participant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;

/// If not all expected fields are present or are of wrong type nil will be returned
- (nullable instancetype)initWithJson:(NSDictionary * __nonnull)json;
- (NSDictionary * __nonnull)toJSON;
- (NSData * __nullable)getCachedAvatar:(CGSize)size;
- (void)cacheAvatar:(CGSize)size avatar:(NSData * __nullable)avatar;
@end



/// Inidicated privileges for a participant in a conference
typedef SWIFT_ENUM(NSUInteger, ParticipantRole) {

/// May mute and kick out guest participants
  ParticipantRoleHost = 0,

/// Can't control the conference, e.g. remove other participants.
  ParticipantRoleGuest = 1,
  ParticipantRoleUndefined = 2,
};

@class NSCoder;


/// Instances of this view class are used to show video from conference. Assign an instance of this view to the Conference videoView property.
SWIFT_CLASS("_TtC6PexKit12PexVideoView")
@interface PexVideoView : RTCEAGLVideoView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, Resolution) {
  Resolutionwqcif = 0,
  Resolutionp216 = 1,
  Resolutionwcif = 2,
  Resolutionp448 = 3,
  Resolutionp576 = 4,
  Resolutionhd = 5,
};


/// Type of error which can happen when calling the Pexip REST API. These are all network related or related to problems with returned data not being of right or expected format.
typedef SWIFT_ENUM(NSInteger, ServiceError) {
  ServiceErrorOk = 0,
  ServiceErrorPinRequired = 1,
  ServiceErrorStatusMissing = 2,
  ServiceErrorDictionaryExpected = 3,
  ServiceErrorConnectionFailed = 4,
  ServiceErrorNotReady = 5,
  ServiceErrorAlreadyActive = 6,
  ServiceErrorGuestOnly = 7,
  ServiceErrorCallCancelled = 8,
  ServiceErrorMalformedURI = 9,
  ServiceErrorInvalidPIN = 10,
  ServiceErrorExtensionRequired = 11,
  ServiceErrorMissingData = 12,
  ServiceErrorUnknown = 13,
  ServiceErrorLyncConferenceIdRequired = 14,
};


/// What kind of conference participant is connected to. E.g. a regular conference or a lecture where participants are meant to listen to one speaker.
typedef SWIFT_ENUM(NSUInteger, ServiceType) {

/// The default
  ServiceTypeConference = 0,

/// Meant in situation like a lecture, where one mainly wants one speaker to speak.
  ServiceTypeLecture = 1,

/// State of user while we are waiting for a called user to join
  ServiceTypeConnecting = 2,
  ServiceTypeTwoStageDialing = 3,

/// If it is a gateway call
  ServiceTypeGateway = 4,

/// Participant waiting to be allowed into a conference by a host. This applies to locked conferences.
  ServiceTypeWaitingRoom = 5,
  ServiceTypeIVR = 6,
  ServiceTypeUndefined = 7,
};


SWIFT_CLASS("_TtC6PexKit5Swell")
@interface Swell : NSObject
+ (void)trace:(NSString * __nonnull (^ __nonnull)(void))fn;
+ (void)debug:(NSString * __nonnull (^ __nonnull)(void))fn;
+ (void)info:(NSString * __nonnull (^ __nonnull)(void))fn;
+ (void)warn:(NSString * __nonnull (^ __nonnull)(void))fn;
+ (void)error:(NSString * __nonnull (^ __nonnull)(void))fn;
+ (void)severe:(NSString * __nonnull (^ __nonnull)(void))fn;

/// Turns off all logging.
+ (void)disableLogging;
@end

#pragma clang diagnostic pop
